pipeline {
    agent any
    options {
        timestamps()
        timeout(time: 5, unit: 'HOURS')
    }
    tools {
        // Customly set in: Jenkins - Manage Jenkins - Global Tool Configuration - JDK installations
        // Downloaded from: https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u222-b10/OpenJDK8U-jdk_x64_linux_8u222b10.tar.gz
        jdk 'openJDK8u222-b10_Jenkins_Maxine'
    }
    environment {
        //Change the first three variables
        USER_HOME="/var/lib/jenkins/user-home"
        DJANGO="$USER_HOME/benchvisualizer/BenchVisualizer"
        DACAPO="$USER_HOME"
        SPECJVM2008="$USER_HOME/SPECjvm2008"

        MAXINE_HOME="$WORKSPACE/maxine"
        MX_HOME="$WORKSPACE/mx"
        MX="$MX_HOME/mx"
        LD_LIBRARY_PATH="$MAXINE_HOME/com.oracle.max.vm.native/generated/linux/"
    }

    stages {
        stage('environment prerequisites') {
            steps {
                script {
                    // Jdk version check. Should be 1.8.0_222.
                    javaHomeVersion = sh(returnStdout: true, script: '$JAVA_HOME/bin/java -version 2>&1 >/dev/null | grep \'java version\\|openjdk version\' | awk \'{print $3}\' | tr -d \'"\'').trim()
                    if ( javaHomeVersion != "1.8.0_222" ) {
                        currentBuild.result = 'FAIL'
                        error("Failing the build due to unsupported jdk version. Should be 1.8.0_222 but it is ${javaHomeVersion}")
                    }
                }
            }
        }
        stage('clone') {
            steps {
                // Clean up workspace
                step([$class: 'WsCleanup'])
                dir(env.MAXINE_HOME) {
                    checkout scm
                }
                dir(env.MX_HOME) {
                    checkout([$class: 'GitSCM', branches: [[name: '5.194.3']], extensions: [[$class: 'CloneOption', shallow: true]], userRemoteConfigs: [[url: 'https://github.com/graalvm/mx.git']]])
                }
                // Trigger fetch of dependencies
                dir(env.MAXINE_HOME) {
                    sh '$MX help > /dev/null'
                }
            }
        }
        stage('build') {
            steps {
                dir(env.MAXINE_HOME) {
                        sh '$MX build'
                    }
            }
        }
        stage('image') {
            steps {
                dir(env.MAXINE_HOME) {
                        sh '$MX -J-ea image'
                    }
            }
        }
        stage('setup benchmarks') {
            parallel {
                stage('setup dacapo-9.12-MR1') {
                    steps {
                        dir(env.MAXINE_HOME) {
                            sh 'wget -nv https://sourceforge.net/projects/dacapobench/files/9.12-bach-MR1/dacapo-9.12-MR1-bach.jar'
                        }
                    }
                }
                stage('setup SPECjvm2008') {
                    steps {
                        dir(env.MAXINE_HOME) {
                            sh 'wget -nv http://spec.cs.miami.edu/downloads/osg/java/SPECjvm2008_1_01_setup.jar'
                            sh '$JAVA_HOME/bin/java -jar SPECjvm2008_1_01_setup.jar -i silent -DUSER_INSTALL_DIR=`pwd`/SPECjvm2008'
                        }
                    }
                }
            }
        }
        stage('DACAPO benchmarks') {
            steps {
                dir(env.MAXINE_HOME) {
                    sh '$MX testme -insitu -dacapoBach=`pwd`/dacapo-9.12-MR1-bach.jar -tests=dacapobach'
                }
            }
        }
        stage('SPECJVM benchmarks') {
            steps {
                dir(env.MAXINE_HOME) {
                    sh '$MX testme -insitu -timeout-scale=200 -timeout-max=1300 -refvm-args=-Xms16G -maxvm-args=-Xms16g,-Xmx16g -specjvm2008=`pwd`/SPECjvm2008/SPECjvm2008.jar -tests=specjvm2008'
                }
            }
        }
    }

    post {
        success {
            slackSend color: '#00CC00', channel: "maxine-builds", message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
        }
        failure {
            slackSend color: '#CC0000', channel: "maxine-builds", message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
        }
        always {
            // can be found at $JENKINS_HOME/jobs/<job>/builds/<build>/archive
            archiveArtifacts artifacts: 'maxine/maxine-tester/**/*.*', fingerprint: true, onlyIfSuccessful: false
        }
    }
}
